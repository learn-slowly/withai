name: Update Indexes

on:
  push:
    branches: 
      - main
    paths:
      - 'content-production/**/*.md'
      - 'foreign-lang/**/*.md'
      - 'webdev/**/*.md'
      - '.github/workflows/update-indexes.yml'

jobs:
  update-indexes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytz

    - name: Update indexes
      id: update
      run: |
        python3 - <<EOF
        import os
        from datetime import datetime
        import pytz
        import re
        import subprocess
        
        def get_korean_time():
            kst = pytz.timezone('Asia/Seoul')
            now = datetime.now(kst)
            return now.strftime('%Y-%m-%d %H:%M:%S')
            
        def update_regular_index(index_path, folder_path):
            print(f"Processing {index_path}...")
            
            if not os.path.exists(index_path):
                print(f"Warning: {index_path} does not exist")
                return False
            
            # 변경된 파일과 새로 추가된 파일 모두 확인
            result = subprocess.run(['git', 'diff', '--name-only', '--diff-filter=d', 'HEAD^', 'HEAD'], 
                                capture_output=True, text=True)
            changed_files = result.stdout.splitlines()
            
            # 날짜 형식 파일만 필터링
            date_files = [f for f in changed_files if f.startswith(f'{folder_path}/') 
                        and re.match(rf'{folder_path}/\d{{8}}\.md$', f)]
            
            if not date_files:
                return False
            
            with open(index_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.splitlines(True)  # Keep line endings
            
            # H1 태그 찾기
            h1_match = re.search(r'^# .*$', content, re.MULTILINE)
            if not h1_match:
                print(f"Warning: No H1 header found in {index_path}")
                return False
            
            # 기존 링크 수집
            existing_links = set()
            for line in lines:
                if line.strip().startswith('- ['):
                    match = re.search(r'\((.+?)\)', line)
                    if match:
                        existing_links.add(match.group(1))
            
            new_lines = []
            after_h1 = False
            updated = False
            last_updated_added = False
            
            for line in lines:
                if line.startswith('# '):
                    new_lines.append(line)
                    after_h1 = True
                    continue
                
                if after_h1 and not last_updated_added:
                    new_lines.append(f'#### Last updated: {get_korean_time()}\n')
                    # 새 파일 추가 (중복 체크)
                    for file in sorted(date_files):
                        relative_path = os.path.basename(file)
                        if relative_path not in existing_links:
                            date = re.search(r'(\d{8})\.md$', file).group(1)
                            formatted_date = f"{date[:4]}-{date[4:6]}-{date[6:]}"
                            new_lines.append(f'- [{formatted_date}]({relative_path})\n')
                            existing_links.add(relative_path)
                            updated = True
                    after_h1 = False
                    last_updated_added = True
                    continue
                
                if not line.startswith('#### Last updated:'):
                    new_lines.append(line)
            
            if updated:
                with open(index_path, 'w', encoding='utf-8') as f:
                    f.writelines(new_lines)
                print(f"Updated {index_path}")
                return True
            return False

        def update_foreign_lang_index(index_path):
            print(f"Processing {index_path}...")
            
            if not os.path.exists(index_path):
                print(f"Warning: {index_path} does not exist")
                return False
            
            # 변경된 파일과 새로 추가된 파일 모두 확인
            result = subprocess.run(['git', 'diff', '--name-only', '--diff-filter=d', 'HEAD^', 'HEAD'], 
                                capture_output=True, text=True)
            changed_files = result.stdout.splitlines()
            
            # en과 jp 폴더의 날짜 형식 파일 필터링
            en_files = [f for f in changed_files if f.startswith('foreign-lang/en/') 
                        and re.match(r'foreign-lang/en/\d{8}\.md$', f)]
            jp_files = [f for f in changed_files if f.startswith('foreign-lang/jp/') 
                        and re.match(r'foreign-lang/jp/\d{8}\.md$', f)]
            
            if not (en_files or jp_files):
                return False
            
            with open(index_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.splitlines(True)  # Keep line endings
            
            # 기존 링크 수집
            existing_en_links = set()
            existing_jp_links = set()
            in_english = False
            in_japanese = False
            
            for line in lines:
                if '## English' in line:
                    in_english = True
                    in_japanese = False
                elif '## Japanese' in line:
                    in_english = False
                    in_japanese = True
                elif line.strip().startswith('#'):
                    in_english = False
                    in_japanese = False
                elif line.strip().startswith('- ['):
                    match = re.search(r'\((.+?)\)', line)
                    if match:
                        if in_english:
                            existing_en_links.add(match.group(1))
                        elif in_japanese:
                            existing_jp_links.add(match.group(1))
            
            new_lines = []
            updated = False
            
            for line in lines:
                if '#### Last updated:' in line and (en_files or jp_files):
                    new_lines.append(f'#### Last updated: {get_korean_time()}\n')
                    updated = True
                elif '## English' in line:
                    new_lines.append(line)
                    # 새 영어 파일 추가
                    for file in sorted(en_files):
                        rel_path = os.path.relpath(file, "foreign-lang")
                        if rel_path not in existing_en_links:
                            date = re.search(r'(\d{8})\.md$', file).group(1)
                            formatted_date = f"{date[:4]}-{date[4:6]}-{date[6:]}"
                            new_lines.append(f'- [{formatted_date}]({rel_path})\n')
                            updated = True
                elif '## Japanese' in line:
                    new_lines.append(line)
                    # 새 일본어 파일 추가
                    for file in sorted(jp_files):
                        rel_path = os.path.relpath(file, "foreign-lang")
                        if rel_path not in existing_jp_links:
                            date = re.search(r'(\d{8})\.md$', file).group(1)
                            formatted_date = f"{date[:4]}-{date[4:6]}-{date[6:]}"
                            new_lines.append(f'- [{formatted_date}]({rel_path})\n')
                            updated = True
                else:
                    new_lines.append(line)
            
            if updated:
                with open(index_path, 'w', encoding='utf-8') as f:
                    f.writelines(new_lines)
                print(f"Updated {index_path}")
                return True
            return False
        
        # Get changed files
        result = subprocess.run(['git', 'diff', '--name-only', '--diff-filter=d', 'HEAD^', 'HEAD'], 
                             capture_output=True, text=True)
        changed_files = result.stdout.splitlines()
        print("Changed files:", changed_files)
        
        # Update regular folders
        if any(f.startswith('content-production/') for f in changed_files):
            update_regular_index('content-production/index.md', 'content-production')
        
        if any(f.startswith('webdev/') for f in changed_files):
            update_regular_index('webdev/index.md', 'webdev')
        
        # Update foreign-lang folder
        if any(f.startswith('foreign-lang/') for f in changed_files):
            update_foreign_lang_index('foreign-lang/index.md')
        
        # Update README.md
        if os.path.exists('README.md'):
            print("Updating README.md")
            with open('README.md', 'r', encoding='utf-8') as f:
                content = f.read()
            
            pattern = r'#### Last updated: .*?\n'
            new_content = re.sub(pattern, f'#### Last updated: {get_korean_time()}\n', content)
            
            with open('README.md', 'w', encoding='utf-8') as f:
                f.write(new_content)
            print("Updated README.md")
        
        exit(0)
        EOF

    - name: Check for changes
      id: changes
      run: |
        git diff --quiet || echo "::set-output name=changed::true"

    - name: Commit changes
      if: steps.changes.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "Update indexes"
        
    - name: Push changes
      if: steps.changes.outputs.changed == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }} 