name: Update Indexes

on:
  push:
    branches: 
      - main
    paths:
      - 'content-production/**/*.md'
      - 'foreign-lang/**/*.md'
      - 'webdev/**/*.md'
      - '.github/workflows/update-indexes.yml'

jobs:
  update-indexes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytz

    - name: Update indexes
      id: update
      run: |
        python3 - <<EOF
        import os
        from datetime import datetime
        import pytz
        import re
        import subprocess
        
        def get_korean_time():
            kst = pytz.timezone('Asia/Seoul')
            now = datetime.now(kst)
            return now.strftime('%Y-%m-%d %H:%M:%S')
            
        def update_index_file(index_path, folder_path, is_foreign_lang=False):
            print(f"Processing {index_path}...")
            
            if not os.path.exists(index_path):
                print(f"Warning: {index_path} does not exist")
                return False
                
            with open(index_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # H1 태그 찾기
            h1_match = re.search(r'^# .*$', content, re.MULTILINE)
            if not h1_match:
                print(f"Warning: No H1 header found in {index_path}")
                return False
            
            h1_pos = h1_match.end()
            
            # Last updated 섹션 업데이트 또는 추가
            last_updated = f"\n#### Last updated: {get_korean_time()}\n"
            if '#### Last updated:' in content:
                content = re.sub(r'#### Last updated:.*\n', last_updated, content)
            else:
                # H1 바로 다음에 Last updated 추가
                content = content[:h1_pos] + last_updated + content[h1_pos:]
            
            if is_foreign_lang:
                # foreign-lang 폴더 특별 처리
                for section, folder in [('## English', 'en'), ('## Japanese', 'jp')]:
                    section_match = re.search(f'{section}.*?\n', content)
                    if section_match:
                        section_pos = section_match.end()
                        
                        # 해당 언어 폴더의 파일들 수집
                        md_files = []
                        target_folder = os.path.join(folder_path, folder)
                        if os.path.exists(target_folder):
                            for file in os.listdir(target_folder):
                                if re.match(r'^\d{8}\.md$', file):
                                    date_str = file[:8]
                                    formatted_date = f"{date_str[:4]}-{date_str[4:6]}-{date_str[6:8]}"
                                    link_path = f"{folder}/{file}"
                                    if f"]({link_path})" not in content:  # 중복 체크
                                        md_files.append((formatted_date, link_path))
                        
                        # 정렬된 링크 추가
                        for date, link in sorted(md_files):
                            content = content[:section_pos] + f"- [{date}]({link})\n" + content[section_pos:]
            else:
                # 일반 폴더 처리
                # 폴더 내의 날짜 형식 .md 파일만 수집 (index.md 제외)
                md_files = []
                for root, _, files in os.walk(folder_path):
                    for file in files:
                        # 날짜 형식 (YYYYMMDD.md) 검사
                        if file.endswith('.md') and file != 'index.md' and re.match(r'^\d{8}\.md$', file):
                            relative_path = os.path.relpath(os.path.join(root, file), folder_path)
                            md_files.append(relative_path)
                
                with open(index_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                new_lines = []
                existing_links = set()
                updated = False
                
                # 기존 링크 수집
                for line in lines:
                    if line.startswith('- ['):
                        link_match = re.search(r'\((.*?)\)', line)
                        if link_match:
                            existing_links.add(link_match.group(1))
                    new_lines.append(line)
                
                # 새로운 날짜 형식 파일에 대한 링크 추가
                for md_file in sorted(md_files):
                    link_path = md_file.replace('\\', '/')
                    if link_path not in existing_links:
                        date_str = os.path.basename(md_file)[:8]  # YYYYMMDD 추출
                        formatted_date = f"{date_str[:4]}-{date_str[4:6]}-{date_str[6:8]}"
                        new_lines.append(f'- [{formatted_date}]({link_path})\n')
                        updated = True
                
                if updated:
                    with open(index_path, 'w', encoding='utf-8') as f:
                        f.writelines(new_lines)
                    print(f"Updated {index_path}")
                    return True
                return False
            
            # 파일 저장
            with open(index_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return True
            
        # Get changed files first
        result = subprocess.run(['git', 'diff', '--name-only', 'HEAD^', 'HEAD'], 
                             capture_output=True, text=True)
        changed_files = result.stdout.splitlines()
        print("Changed files:", changed_files)
        
        # Set any_updates to True at the start
        any_updates = True
        
        # Then update files
        if any(f.startswith('content-production/') for f in changed_files):
            update_index_file('content-production/index.md', 'content-production')
        
        if any(f.startswith('foreign-lang/') for f in changed_files):
            update_index_file('foreign-lang/index.md', 'foreign-lang', True)
        
        if any(f.startswith('webdev/') for f in changed_files):
            update_index_file('webdev/index.md', 'webdev')
        
        # Finally update README.md
        if os.path.exists('README.md'):
            print("Updating README.md")
            with open('README.md', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # 정규식을 사용하여 마지막 Last updated 줄을 찾아 교체
            pattern = r'#### Last updated: .*?\n'
            new_content = re.sub(pattern, f'#### Last updated: {get_korean_time()}\n', content)
            
            # 파일 쓰기
            with open('README.md', 'w', encoding='utf-8') as f:
                f.write(new_content)
            print("Updated README.md")
        
        # Exit with status code
        exit(0 if any_updates else 1)
        EOF

    - name: Check for changes
      id: changes
      run: |
        git diff --quiet || echo "::set-output name=changed::true"

    - name: Commit changes
      if: steps.changes.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "Update indexes"
        
    - name: Push changes
      if: steps.changes.outputs.changed == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }} 