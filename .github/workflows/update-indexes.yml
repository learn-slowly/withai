name: Update Index Files

on:
  push:
    paths:
      - 'content-production/**.md'
      - 'webdev/**.md'
      - 'foreign-lang/en/**.md'
      - 'foreign-lang/jp/**.md'
    branches:
      - main

jobs:
  update-indexes:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Update index files
        run: |
          python3 << 'EOF'
          import os
          import re
          from datetime import datetime
          import pytz

          def get_korean_time():
              kst = pytz.timezone('Asia/Seoul')
              now = datetime.now(kst)
              return now.strftime('%Y-%m-%d %H:%M:%S')

          def update_index_file(index_path, new_files):
              if not os.path.exists(index_path):
                  return
                  
              with open(index_path, 'r', encoding='utf-8') as f:
                  content = f.read()
                  
              # H1 제목 찾기
              h1_match = re.search(r'^# .*$', content, re.MULTILINE)
              if not h1_match:
                  return
                  
              h1_end = h1_match.end()
              
              # 현재 시간 추가
              current_time = get_korean_time()
              time_update = f"\n### Last updated: {current_time}\n"
              
              # 새로운 파일 링크 추가
              new_links = ""
              for file in sorted(new_files, reverse=True):
                  date = os.path.splitext(os.path.basename(file))[0]
                  if re.match(r'^\d{8}$', date):
                      formatted_date = f"{date[:4]}-{date[4:6]}-{date[6:]}"
                      new_links += f"\n## [{formatted_date}]({file})\n"
              
              # 컨텐츠 업데이트
              updated_content = content[:h1_end] + time_update + new_links + content[h1_end:]
              
              with open(index_path, 'w', encoding='utf-8') as f:
                  f.write(updated_content)

          def update_foreign_lang_index(index_path, jp_files, en_files):
              if not os.path.exists(index_path):
                  return
                  
              with open(index_path, 'r', encoding='utf-8') as f:
                  content = f.read()
                  
              # H1 제목 찾기
              h1_match = re.search(r'^# .*$', content, re.MULTILINE)
              if not h1_match:
                  return
                  
              h1_end = h1_match.end()
              
              # 현재 시간 추가
              current_time = get_korean_time()
              time_update = f"\n### Last updated: {current_time}\n"
              
              # 기존 내용에서 ## Japanese와 ## English 섹션 찾기
              sections = content[h1_end:].split('\n## ')
              
              # 새로운 파일 링크 생성
              jp_links = ""
              for file in sorted(jp_files, reverse=True):
                  date = os.path.splitext(os.path.basename(file))[0]
                  if re.match(r'^\d{8}$', date):
                      formatted_date = f"{date[:4]}-{date[4:6]}-{date[6:]}"
                      jp_links += f"\n## [{formatted_date}](foreign-lang/jp/{file})\n"
                      
              en_links = ""
              for file in sorted(en_files, reverse=True):
                  date = os.path.splitext(os.path.basename(file))[0]
                  if re.match(r'^\d{8}$', date):
                      formatted_date = f"{date[:4]}-{date[4:6]}-{date[6:]}"
                      en_links += f"\n## [{formatted_date}](foreign-lang/en/{file})\n"
              
              # 각 섹션 업데이트
              updated_sections = []
              for section in sections:
                  if section.startswith('Japanese'):
                      updated_sections.append(f"Japanese{jp_links}\n{section[8:]}")
                  elif section.startswith('English'):
                      updated_sections.append(f"English{en_links}\n{section[7:]}")
                  else:
                      updated_sections.append(section)
              
              # 컨텐츠 업데이트
              updated_content = content[:h1_end] + time_update + '\n## '.join(updated_sections)
              
              with open(index_path, 'w', encoding='utf-8') as f:
                  f.write(updated_content)

          def update_readme():
              if not os.path.exists('README.md'):
                  return
                  
              with open('README.md', 'r', encoding='utf-8') as f:
                  content = f.read()
                  
              current_time = get_korean_time()
              time_update = f"\n### Last updated: {current_time}\n"
              
              # H1 제목 찾기
              h1_match = re.search(r'^# .*$', content, re.MULTILINE)
              if h1_match:
                  h1_end = h1_match.end()
                  updated_content = content[:h1_end] + time_update + content[h1_end:]
                  
                  with open('README.md', 'w', encoding='utf-8') as f:
                      f.write(updated_content)

          # 각 폴더의 마크다운 파일 수집
          content_prod_files = [f for f in os.listdir('content-production') if f.endswith('.md') and f != 'index.md']
          webdev_files = [f for f in os.listdir('webdev') if f.endswith('.md') and f != 'index.md']
          jp_files = [f for f in os.listdir('foreign-lang/jp') if f.endswith('.md')]
          en_files = [f for f in os.listdir('foreign-lang/en') if f.endswith('.md')]

          # 인덱스 파일 업데이트
          update_index_file('content-production/index.md', content_prod_files)
          update_index_file('webdev/index.md', webdev_files)
          update_foreign_lang_index('foreign-lang/index.md', jp_files, en_files)
          update_readme()
          EOF

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "Update index files" || exit 0
          git push
